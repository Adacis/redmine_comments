<%
  authorized_roles = Role.joins(:members)
                         .where("members.project_id = ?", @project.id)
                         .uniq
                         .select { |role| role.has_permission?(:view_private_notes_from_role_or_function) }

  if Redmine::Plugin.installed?(:redmine_limited_visibility)
    user_roles = Function.joins(:members => [:member_roles, :user])
                         .where("members.project_id = ?", @project.id)
                         .where("members.user_id = ?", User.current.id)
                         .where("member_roles.role_id IN (?)", authorized_roles.map(&:id))
                         .where("users.status = ? ", Principal::STATUS_ACTIVE)

    checked_roles = @journal.present? ? @journal.functions : user_roles
    selectable_roles = Function.joins(:members => [:member_roles, :user])
                               .where("members.project_id = ?", @project.id)
                               .where("member_roles.role_id IN (?)", authorized_roles.map(&:id))
                               .where("users.status = ? ", Principal::STATUS_ACTIVE)
                               .distinct.sorted
    functions_allowed_by_private_notes_groups = PrivateNotesGroup.where(group_id: user_roles.map(&:id)).map(&:function)
    selectable_roles = selectable_roles & (functions_allowed_by_private_notes_groups | checked_roles) if functions_allowed_by_private_notes_groups.present?
  else
    user_roles = Role.joins(:members => [:member_roles, :user])
                     .where("members.project_id = ?", @project.id)
                     .where("members.user_id = ?", User.current.id)
                     .where("member_roles.role_id IN (?)", authorized_roles.map(&:id))
                     .where("users.status = ? ", Principal::STATUS_ACTIVE)
    checked_roles = @journal.present? ? @journal.roles : user_roles
    selectable_roles = Role.joins(:members => [:member_roles, :user])
                           .where("members.project_id = ?", @project.id)
                           .where("member_roles.role_id IN (?)", authorized_roles.map(&:id))
                           .where("users.status = ? ", Principal::STATUS_ACTIVE)
                           .distinct.sorted
  end

  selectable_roles = selectable_roles | checked_roles | user_roles
%>

<div class="visibility" style="margin-bottom: 0.2em;">
  <em class="info"><%= l(:text_info_comment_visibility) %></em>

  <% selectable_roles.each do |role| %>
    <% involved = "involved" if checked_roles.include?(role) %>
    <% disabled = "disabled" if involved.present? && checked_roles.size == 1 %>
    <% css_classes = "#{involved} #{disabled} " %>
    <%= render "issue_comments/visibility_role", :function => role, styles: css_classes %>
  <% end %>
</div>
<%= hidden_field_tag "journal[visibility]", checked_roles.map(&:id).join('|'), id: "journal_visibility" %>
